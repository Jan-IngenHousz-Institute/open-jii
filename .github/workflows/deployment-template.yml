name: Deployment Template

on:
  workflow_call:
    inputs:
      environment:
        description: "The deployment environment"
        required: true
        type: string
  workflow_dispatch:

# Job 1: Build, Lint, Test & AsyncAPI
jobs:
  build_lint_test:
    name: Build, Lint, Test & AsyncAPI
    runs-on: ubuntu-latest
    outputs:
      affected_apps: ${{ steps.build.outputs.affected_apps }}
      has_affected_apps: ${{ steps.build.outputs.has_affected_apps }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build, Lint & Test
        id: build
        uses: ./.github/actions/blt
        with:
          node-version: "22"
          artifact_retention: "7"
          base: "HEAD^1"
          environment: "${{ inputs.environment }}"

  # Job 2: Terraform (Plan & Apply)
  tofu:
    name: OpenTofu
    needs: build_lint_test
    if: needs.build_lint_test.outputs.has_affected_apps == 'true'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      TF_VAR_terraform_state_s3_bucket_name: ${{ secrets.TERRAFORM_STATE_S3_BUCKET_NAME }}
      TF_VAR_docusaurus_s3_bucket_name: ${{ secrets.DOCUSAURUS_S3_BUCKET_NAME }}
      TF_VAR_databricks_bucket_name: ${{ secrets.DATABRICKS_S3_BUCKET_NAME }}
      TF_VAR_unity_catalog_bucket_name: ${{ secrets.UNITY_CATALOG_S3_BUCKET_NAME }}
      TF_VAR_timestream_database_name: ${{ secrets.TIMESTREAM_DB_NAME }}
      TF_VAR_timestream_table_name: ${{ secrets.TIMESTREAM_TABLE_NAME }}
      TF_VAR_iot_timestream_policy_name: ${{ secrets.IOT_TIMESTREAM_POLICY_NAME }}
      TF_VAR_iot_timestream_role_name: ${{ secrets.IOT_TIMESTREAM_ROLE_NAME }}
      TF_VAR_iot_kinesis_policy_name: ${{ secrets.IOT_KINESIS_POLICY_NAME }}
      TF_VAR_iot_logging_role_name: ${{ secrets.IOT_LOGGING_ROLE_NAME }}
      TF_VAR_iot_logging_policy_name: ${{ secrets.IOT_LOGGING_POLICY_NAME }}
      TF_VAR_iot_kinesis_role_name: ${{ secrets.IOT_KINESIS_ROLE_NAME }}
      TF_VAR_kinesis_stream_name: ${{ secrets.KINESIS_STREAM_NAME }}
      TF_VAR_kinesis_credential_id: ${{ secrets.KINESIS_CREDENTIAL_ID }}
      TF_VAR_databricks_account_id: ${{ secrets.DATABRICKS_ACCOUNT_ID }}
      TF_VAR_databricks_client_id: ${{ secrets.DATABRICKS_CLIENT_ID }}
      TF_VAR_databricks_client_secret: ${{ secrets.DATABRICKS_CLIENT_SECRET }}
      TF_VAR_databricks_workspace_url: ${{ secrets.DATABRICKS_WORKSPACE_URL }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run OpenTofu Operations
        uses: ./.github/actions/tofu
        with:
          aws_role_arn: ${{ secrets.AWS_ROLE_ARN }}
          aws_region: ${{ secrets.AWS_REGION }}
          tofu_version: "1.6.0"
          environment: "${{ inputs.environment }}"  

      # - name: Apply Infrastructure
      #   working-directory: infrastructure/env/${{ inputs.environment }}
      #   run: tofu apply -auto-approve

  # Job 3: Deploy Artifacts
  deploy:
    name: Deploy Artifacts
    needs: [build_lint_test, tofu]
    if: needs.build_lint_test.outputs.has_affected_apps == 'true'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: app-artifacts
          path: artifacts

      - name: Check Artifact Files
        run: |
          if [ -d "artifacts" ] && [ "$(ls -A artifacts)" ]; then
            echo "Artifacts downloaded successfully"
          else
            echo "No artifacts found"
            exit 1
          fi

  # # Job 4: Deploy Next.js with OpenNext
  # deploy-nextjs:
  #   name: Deploy Next.js with OpenNext
  #   needs: [build_lint_test, tofu]
  #   if: needs.build_lint_test.outputs.has_affected_apps == 'true'
  #   uses: ./.github/workflows/deploy-nextjs-opennext.yml
  #   with:
  #     environment: ${{ inputs.environment }}
  #   secrets: inherit
  #   permissions:
  #     id-token: write
  #     contents: read
