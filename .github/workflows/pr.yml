name: PR Workflow; Build, Lint, Test & Tofu Validation

on:
  pull_request:
    types:
      - opened
      - edited
      - synchronize
      - reopened
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read

jobs:
  validate_pr:
    name: Validate PR title
    runs-on: ubuntu-latest
    steps:
      - uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_lint_test:
    name: Build, Lint, Test & AsyncAPI
    runs-on: ubuntu-latest
    env:
      DO_NOT_TRACK: 1
      TURBO_TELEMETRY_DISABLED: 1
      environment: "dev"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-nodejs-pnpm
        with:
          node-version: "22"
      - name: Detect Affected Packages
        id: detect
        uses: ./.github/actions/detect-affected-packages

      - name: Build Packages
        if: steps.detect.outputs.has_affected_apps == 'true'
        uses: ./.github/actions/build-packages
        with:
          affected_apps: ${{ steps.detect.outputs.affected_apps }}

      - name: Lint Packages
        if: steps.detect.outputs.has_affected_apps == 'true'
        uses: ./.github/actions/lint-packages
        with:
          affected_apps: ${{ steps.detect.outputs.affected_apps }}

      - name: Test Packages
        if: steps.detect.outputs.has_affected_apps == 'true'
        uses: ./.github/actions/test-packages
        with:
          affected_apps: ${{ steps.detect.outputs.affected_apps }}
          codecov-token: ${{ secrets.CODECOV_TOKEN }}

  # tofu:
  #   name: OpenTofu
  #   needs: build_lint_test
  #   runs-on: ubuntu-latest
  #   permissions:
  #     id-token: write
  #     contents: read
  #   env:
  #     TF_VAR_terraform_state_s3_bucket_name: ${{ secrets.TERRAFORM_STATE_S3_BUCKET_NAME }}
  #     TF_VAR_docusaurus_s3_bucket_name: ${{ secrets.DOCUSAURUS_S3_BUCKET_NAME }}
  #     TF_VAR_databricks_bucket_name: ${{ secrets.DATABRICKS_S3_BUCKET_NAME }}
  #     TF_VAR_timestream_database_name: ${{ secrets.TIMESTREAM_DB_NAME }}
  #     TF_VAR_timestream_table_name: ${{ secrets.TIMESTREAM_TABLE_NAME }}
  #     TF_VAR_iot_timestream_policy_name: ${{ secrets.IOT_TIMESTREAM_POLICY_NAME }}
  #     TF_VAR_iot_timestream_role_name: ${{ secrets.IOT_TIMESTREAM_ROLE_NAME }}
  #     TF_VAR_iot_kinesis_policy_name: ${{ secrets.IOT_KINESIS_POLICY_NAME }}
  #     TF_VAR_iot_kinesis_role_name: ${{ secrets.IOT_KINESIS_ROLE_NAME }}
  #     TF_VAR_kinesis_stream_name: ${{ secrets.KINESIS_STREAM_NAME }}
  #     TF_VAR_databricks_account_id: ${{ secrets.DATABRICKS_ACCOUNT_ID }}
  #     TF_VAR_databricks_client_id: ${{ secrets.DATABRICKS_CLIENT_ID }}
  #     TF_VAR_databricks_client_secret: ${{ secrets.DATABRICKS_CLIENT_SECRET }}
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Run OpenTofu Operations
  #       uses: ./.github/actions/tofu
  #       with:
  #         aws_role_arn: ${{ secrets.AWS_ROLE_ARN }}
  #         aws_region: ${{ secrets.AWS_REGION }}
  #         tofu_version: "1.9.0"
  #         environment: "dev"
