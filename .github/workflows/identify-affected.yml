name: Identify Affected Projects

on:
  workflow_call:
    inputs:
      node-version:
        description: "Node.js version"
        required: false
        type: string
        default: "22"
    outputs:
      affected_apps:
        description: "JSON array of affected app names"
        value: ${{ jobs.identify.outputs.affected_apps }}
      has_affected_apps:
        description: "Whether there are any affected apps"
        value: ${{ jobs.identify.outputs.has_affected_apps }}

jobs:
  identify:
    name: Identify Affected Projects
    runs-on: ubuntu-latest
    env:
      TURBO_REF_FILTER: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || github.event.before }}
    outputs:
      affected_apps: ${{ steps.check.outputs.affected_apps }}
      has_affected_apps: ${{ steps.check.outputs.has_affected_apps }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: "pnpm"

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Identify Affected Projects
        id: check
        run: |
          echo "Using base for change detection: $TURBO_REF_FILTER"

          # Get list of affected projects using provided base
          pnpm turbo run build --dry-run=json --filter=...[$TURBO_REF_FILTER] --output-logs=none > affected.json

          # Extract project names from packages array and filter out "//" entry
          AFFECTED_APPS=$(jq -c '[.packages[] | select(. != "//")]' affected.json)
                  
          # Store the affected apps for output
          echo "affected_apps=$(echo $AFFECTED_APPS | jq -c .)" >> $GITHUB_OUTPUT

          # Check if we have any affected apps
          if [ "$(echo $AFFECTED_APPS | jq 'length')" -gt 0 ]; then
            echo "has_affected_apps=true" >> $GITHUB_OUTPUT

            # Print the affected apps in a more readable format (like the shell script)
            echo "âœ… Found affected packages:"
            echo "$AFFECTED_APPS" | jq '.'
          else
            echo "has_affected_apps=false" >> $GITHUB_OUTPUT
            echo "No affected packages found"
          fi

          # Create a file with the list of affected apps for use in next steps
          echo $AFFECTED_APPS > affected_apps.json

      - name: Upload Affected Apps List
        if: steps.check.outputs.has_affected_apps == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: affected-apps
          path: affected_apps.json
          retention-days: 1
